<?php
    require_once __DIR__ . '/database.php';
    connectToDatabase();
    
   /*   Retrieve geoloc details from browserId / public IP
    *   $browserID = the id browser generated in hook.js
    *   $publicIP = the public IP sent by hook.js
    */
    function getGeoloc($browserId, $publicIP) {
        // Try to retrieve geoloc from DB
        $geoloc = getGeolocFromDB($browserId);
        
        // If geoloc is not in DB, call the public API
        if(is_null($geoloc)) {        
            getGeolocFromAPI($browserId, $publicIP);
            $geoloc = getGeolocFromDB($browserId);
        }

        return $geoloc;              
    }

   /*   Retrieve geoloc details from public IP, call to public API
    *   $browserID = the id browser generated in hook.js
    *   $publicIP = the public IP sent by hook.js
    */
    function getGeolocFromAPI($browserId, $publicIP) {   
        if(isset($browserId) && !empty($browserId)) {            
            if(isset($publicIP) && !empty($publicIP)) {
                // Retrieve geoloc info
                $ch = curl_init();
                curl_setopt($ch, CURLOPT_URL, "http://demo.ip-api.com/json/" . $publicIP . "?fields=33288191&lang=en");
                curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
                $output = curl_exec($ch);
                curl_close($ch);

                $geoloc = json_decode($output, true);

                if(!($stmt = $GLOBALS['___mysqli_ston']->prepare("INSERT INTO geoloc_browsers (browser_id, country, country_code, region_name, city, district, zip, lat, lon, isp) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"))) {
                    return;
                }
                if(!$stmt->bind_param("ssssssssss", $browserId, $geoloc['country'], $geoloc['countryCode'], $geoloc['regionName'], $geoloc['city'], $geoloc['district'], $geoloc['zip'], $geoloc['lat'], $geoloc['lon'], $geoloc['isp'])) {
                    return;
                }    
                if(!$stmt->execute()) {
                    return;
                }

                $stmt->free_result();
                $stmt->close(); 
            }
        }
    }

   /*   Retrieve geoloc details in DB from browserId
    *   $browserID = the id browser generated in hook.js
    */
    function getGeolocFromDB($browserId) {
        if(isset($browserId) && !empty($browserId)) {
            if(!($stmt = $GLOBALS['___mysqli_ston']->prepare("SELECT browser_id, country, country_code, region_name, city, district, zip, lat, lon, isp FROM geoloc_browsers WHERE browser_id = ?"))) {
                return;
            }

            if (!$stmt->bind_param("s", $browserId)) {
                return;
            }
            
            if(!$stmt->execute()) {
                return;
            }

            $outBrowserId = NULL;
            $outCountry = NULL;
            $outCountryCode = NULL;
            $outRegionName = NULL;
            $outCity = NULL;
            $outDistrict = NULL;
            $outZip = NULL;
            $outLat = NULL;
            $outLon = NULL;
            $outIsp = NULL;
            $browserGeoloc = array();

            $stmt->store_result();
            $stmt->bind_result($outBrowserId, $outCountry, $outCountryCode, $outRegionName, $outCity, $outDistrict, $outZip, $outLat, $outLon, $outIsp);

            if($stmt->num_rows === 1) {  
                while($stmt->fetch()) {
                    $browserGeoloc = array('browserId'=>$outBrowserId, 'country'=>$outCountry, 'countryCode'=>$outCountryCode, 'regionName'=>$outRegionName, 'city'=>$outCity, 'district'=>$outDistrict, 'zip'=>$outZip, 'lat'=>$outLat, 'lon'=>$outLon, 'isp'=>$outIsp);
                }

                $stmt->free_result();
                $stmt->close(); 

                return $browserGeoloc;
            }

            return null;
        }
    }

    function getCountFromCountries() {
        if(!($stmt = $GLOBALS['___mysqli_ston']->prepare("SELECT country_code, count(*) from geoloc_browsers GROUP BY country_code"))) {
            return;
        }

        if(!$stmt->execute()) {
            return;
        }

        $outCountryCode = NULL;
        $outCount = NULL;
        $countFromCountries = array();

        $stmt->store_result();
        $stmt->bind_result($outCountryCode, $outCount);

        while($stmt->fetch()) {
            $countFromCountries[] = array('countryCode'=>$outCountryCode, 'count'=>$outCount);
        }

        $stmt->free_result();
        $stmt->close(); 

        return $countFromCountries;
    }
?>